{"version":3,"sources":["img/favicon.png","img/5c07e6dcbd9df.png","articles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","articles","id","createUUID","name","url","date","App","react_default","a","createElement","className","src","icon","bg","map","v","key","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mRC0BzBC,EAfE,CACf,CACEC,GAAIC,MACJC,KAAM,mDACNC,IAAK,wCACLC,KAAM,cAER,CACEJ,GAAIC,MACJC,KAAM,uHACNC,IAAK,wCACLC,KAAM,+BCiCKC,mLA/CX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,MACVL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,+CAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKE,OAEZN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAEXV,EAASc,IAAI,SAACC,GACZ,OACER,EAAAC,EAAAC,cAAA,OAAKO,IAAKD,EAAEd,GAAIS,UAAU,QACxBH,EAAAC,EAAAC,cAAA,KACEQ,KAAMF,EAAEX,IACRc,OAAO,SACPC,IAAI,uBAEHJ,EAAEV,KALL,KAKaU,EAAEZ,UAOzBI,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAChBH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sCACQF,EAAAC,EAAAC,cAAA,KAAGS,OAAO,SAASC,IAAI,sBAAsBF,KAAK,8CAAlD,8CADR,yFAGAV,EAAAC,EAAAC,cAAA,gCACOF,EAAAC,EAAAC,cAAA,KAAGS,OAAO,SAASC,IAAI,sBAAsBF,KAAK,8CAAlD,8CADP,sHAGAV,EAAAC,EAAAC,cAAA,mEACYF,EAAAC,EAAAC,cAAA,KAAGS,OAAO,SAASC,IAAI,sBAAsBF,KAAK,4BAAlD,6BADZ,0SAtCIG,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7365c900.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.5c564994.png\";","module.exports = __webpack_public_path__ + \"static/media/5c07e6dcbd9df.828d0d7f.png\";","import createUUID from \"usedjs/lib/createUUID\";\n\nexport interface IArticle {\n  id: string;\n  name: string;\n  url: string;\n  date: string;\n}\n\nexport type Articles = IArticle;\n\nconst articles = [\n  {\n    id: createUUID(),\n    name: \"理解 JavaScript 中的循环\",\n    url: \"https://zhuanlan.zhihu.com/p/62246809\",\n    date: \"2019-04-12\"\n  },\n  {\n    id: createUUID(),\n    name: \"ES5 to ESNext —  自 2015 以来 JavaScript 新增的所有新特性\",\n    url: \"https://zhuanlan.zhihu.com/p/59535309\",\n    date: \"2019-03-17\"\n  }\n];\n\nexport default articles;","import React, { Component } from 'react';\nimport './App.css';\nimport icon from \"./img/favicon.png\";\nimport articles from \"./articles\";\nimport bg from \"./img/5c07e6dcbd9df.png\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <header className=\"header\">\n            <img src={icon} />\n            <span className=\"header-text\">闪电矿工翻译组</span>\n          </header>\n          <div className=\"content\">\n            <header className=\"content-header\">\n              <img src={bg} />\n            </header>\n            <div className=\"content-container\">\n              {\n                articles.map((v) => {\n                  return (\n                    <div key={v.id} className=\"item\">\n                      <a\n                        href={v.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        {v.date}: {v.name}\n                      </a>\n                    </div>\n                  )\n                })\n              }\n            </div>\n            <footer className=\"copyright\">\n              <h2>Copyright</h2>\n              <p>\n                版权声明: <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/lightningminers/article\">闪电矿工翻译组</a> 译文仅用于学习、研究和交流。\n              </p>\n              <p>\n                版权归: <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/lightningminers/article\">闪电矿工翻译组</a>、文章作者和译者所有，欢迎非商业转载。\n              </p>\n              <p>\n                转载前请联系译者或 <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/icepy\">管理员 @icepy</a> 获取授权，并在文章开头明显位置注明本文出处、译者、校对者和闪电矿工翻译组的完整链接，违者必究。\n              </p>\n            </footer>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}